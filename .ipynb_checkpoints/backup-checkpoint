// Mapping between state abbreviations and their center coordinates
const stateCenters = {
  "AK": [61.370716, -152.404419], // Alaska
  "AL": [32.806671, -86.791130],  // Alabama
  "AR": [34.969704, -92.373123],  // Arkansas
  "AZ": [33.729759, -111.431221], // Arizona
  "CA": [36.778259, -119.417931], // California
  "CO": [39.059811, -105.311104], // Colorado
  "CT": [41.597782, -72.755371],  // Connecticut
  "DC": [38.897438, -77.026817],  // District of Columbia
  "DE": [39.318523, -75.507141],  // Delaware
  "FL": [27.766279, -81.686783],  // Florida
  "GA": [33.040619, -83.643074],  // Georgia
  "HI": [21.094318, -157.498337], // Hawaii
  "ID": [44.240459, -114.478828], // Idaho
  "IL": [40.349457, -88.986137]   // Illinois
  // Add more states as needed
};
const stateAbbreviations = {
  "Alabama": "AL",
  "Alaska": "AK",
  "Arizona": "AZ",
  "Arkansas": "AR",
  "California": "CA",
  "Colorado": "CO",
  "Connecticut": "CT",
  "Delaware": "DE",
  "Florida": "FL",
  "Georgia": "GA",
  "Hawaii": "HI",
  "Idaho": "ID",
  "Illinois": "IL",
  // Add more states as needed
};
// Creating the map object
let myMap = L.map("map").setView([37.0902, -95.7129], 4); // Center of the US

// Adding the tile layer
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
}).addTo(myMap);

// Load the US states GeoJSON
fetch('us-states.json')
.then(response => response.json())
.then(data => {
  // Process GeoJSON data
  L.geoJSON(data, {
    style: function(feature) {
      let stateName = feature.properties.name;
      let stateAbbreviation = stateAbbreviations[stateName];
      if (stateDataAvailable(stateAbbreviation)) {
        // Return style for states with data
        return {
          fillColor: 'red',
          color: "#ff7800",
          weight: 2,
          opacity: 0.65,
          fillOpacity: 0.8 // Adjust the fill opacity as needed
        };
      } else {
        // Return grayed-out style for states without data
        return {
          color: "#999",
          weight: 2,
          opacity: 0.65,
          fillOpacity: 0.2 // Adjust the fill opacity as needed
        };
      }
    },
    onEachFeature: function (feature, layer) {
      layer.on('click', function() {
        let stateName = feature.properties.name;
        let stateAbbreviation = stateAbbreviations[stateName];
        if (stateDataAvailable(stateAbbreviation)) {
          loadCSVData(stateAbbreviation);
        } else {
          alert(`No data available for ${stateName}`);
        }
      });
    }
  }).addTo(myMap);
})
.catch(error => {
  console.error('Error loading GeoJSON data:', error);
});

// Function to check if data is available for a specific state
function stateDataAvailable(stateAbbreviation) {
  let statesWithData = ['AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL', 'GA', 'HI', 'ID', 'IL']; // List of states with data
  return statesWithData.includes(stateAbbreviation); // Check if the abbreviation is in the list
}

// Load the CSV data for a specific state when clicked
function loadCSVData(stateAbbreviation) {
  console.log("State clicked:", stateAbbreviation); // Log the state abbreviation to check
  // Load the CSV data for the selected state
  d3.csv("Averaged_Cleaned_filtered_data.csv").then(function(data) {
      // Filter data for the selected state
      let stateData = data.filter(d => d['US States'] === stateAbbreviation);
      console.log("State data:", stateData); // Log the filtered data to check
      
      // Check if data is available for the state
      if (stateData.length > 0) {
          // Add popup if state data is found
          let popupContent = `<b>${stateAbbreviation} Incidence Data</b><br>`;
          stateData.forEach(entry => {
              popupContent += `Year: ${entry.Year}, Incidence: ${entry['Data_Value/100_000 People']}<br>`;
          });

          // Get the center coordinates for the state
          let stateCenter = stateCenters[stateAbbreviation];
          if (stateCenter) {
              L.popup()
                  .setLatLng(stateCenter) // Use the state center for the popup
                  .setContent(popupContent)
                  .openOn(myMap);
          } else {
              alert(`Cannot find center for ${stateAbbreviation}`);
          }
      } // <--- Move this closing bracket here
  }).catch(function(error) {
      console.error('Error loading CSV data:', error);
  });
}
